serverConfig:
  port: 8080
cloudEventServerConfig:
  port: 8181
jobConfig:
  lockName: horizon-lock
  lockNS: horizoncd
  leaseDuration: 15
  renewDeadline: 10
  retryPeriod: 2
dbConfig:
  host: ""
  port: 3331
  username: ""
  password: ""
  database: ""
  prometheusEnabled: true
kubeconfig: ""
sessionConfig:
  maxAge: 43200
redisConfig:
  protocol: tcp
  address: ""
  password: ""
  db: 1
gitRepos: []
gitopsRepoConfig:
  rootGroupPath: ""
  url:
  token:
templateRepo:
  kind: "harbor"
  host: ""
  repoName: "horizon-template"
  username: ""
  password: ""
  insecure: true
  certFile: ""
  keyFile: ""
  caFile: ""
argoCDMapper:
  dev,test,reg,perf,beta,pre,online:
    url: ""
    token: ""
    namespace: ""
tektonMapper:
  dev,test,reg,perf,beta,pre,online:
    server: ""
    namespace: ""
    # if you run horizon on local machine, you need to set this to the absolute path of your kubeconfig
    # if you are running it on mac, the path may be looked like '/Users/xxx/.kube/config'
    kubeconfig: "/Users/xxx/.kube/config"
    logStorage:
      # the following types of log storage are supported:
      #   s3: Minio is used by default, and you can also specify your own s3 storage.
      #   dummy: A dummy log storage. Building logs are not stored and Horizon gets them directly from k8s.
      type: dummy
      accessKey: ""
      secretKey: ""
      region: ""
      endpoint: ""
      bucket: ""
      disableSSL: false
      skipVerify: true
      s3ForcePathStyle: true
grafanaConfig:
  host: http://localhost:3000
  namespace: horizon
  dashboards:
    # label that the configmaps with dashboards are marked with
    labelKey: grafana_dashboard
    # value of label that the configmaps with dashboards are set to
    labelValue: "1"
  syncDatasourceConfig:
    period: 2m
    # label that the configmaps with datasources are marked with
    labelKey: grafana_datasource
    # value of label that the configmaps with datasources are set to
    labelValue: "1"
oauth:
  # if you run horizon on local machine, you need to set this to the absolute path of your auth.html
  # for example ${projectdir}/core/http/api/v1/oauthserver/auth.html
  oauthHTMLLocation: ""
  authorizeCodeExpireIn: 10m
  accessTokenExpireIn: 24h

tokenConfig:
  jwtSigningKey: ""
  callbackTokenExpireIn: 2h
