// Code generated by MockGen. DO NOT EDIT.
// Source: k8sutil.go

// Package mock_cd is a generated GoMock package.
package mock_cd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cd "github.com/horizoncd/horizon/pkg/cd"
	v1 "k8s.io/api/core/v1"
)

// MockK8sUtil is a mock of K8sUtil interface.
type MockK8sUtil struct {
	ctrl     *gomock.Controller
	recorder *MockK8sUtilMockRecorder
}

// MockK8sUtilMockRecorder is the mock recorder for MockK8sUtil.
type MockK8sUtilMockRecorder struct {
	mock *MockK8sUtil
}

// NewMockK8sUtil creates a new mock instance.
func NewMockK8sUtil(ctrl *gomock.Controller) *MockK8sUtil {
	mock := &MockK8sUtil{ctrl: ctrl}
	mock.recorder = &MockK8sUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sUtil) EXPECT() *MockK8sUtilMockRecorder {
	return m.recorder
}

// DeletePods mocks base method.
func (m *MockK8sUtil) DeletePods(ctx context.Context, params *cd.DeletePodsParams) (map[string]cd.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePods", ctx, params)
	ret0, _ := ret[0].(map[string]cd.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePods indicates an expected call of DeletePods.
func (mr *MockK8sUtilMockRecorder) DeletePods(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePods", reflect.TypeOf((*MockK8sUtil)(nil).DeletePods), ctx, params)
}

// Exec mocks base method.
func (m *MockK8sUtil) Exec(ctx context.Context, params *cd.ExecParams) (map[string]cd.ExecResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, params)
	ret0, _ := ret[0].(map[string]cd.ExecResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockK8sUtilMockRecorder) Exec(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockK8sUtil)(nil).Exec), ctx, params)
}

// ExecuteAction mocks base method.
func (m *MockK8sUtil) ExecuteAction(ctx context.Context, params *cd.ExecuteActionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAction", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAction indicates an expected call of ExecuteAction.
func (mr *MockK8sUtilMockRecorder) ExecuteAction(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAction", reflect.TypeOf((*MockK8sUtil)(nil).ExecuteAction), ctx, params)
}

// GetContainerLog mocks base method.
func (m *MockK8sUtil) GetContainerLog(ctx context.Context, params *cd.GetContainerLogParams) (<-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLog", ctx, params)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLog indicates an expected call of GetContainerLog.
func (mr *MockK8sUtilMockRecorder) GetContainerLog(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLog", reflect.TypeOf((*MockK8sUtil)(nil).GetContainerLog), ctx, params)
}

// GetPod mocks base method.
func (m *MockK8sUtil) GetPod(ctx context.Context, params *cd.GetPodParams) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, params)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockK8sUtilMockRecorder) GetPod(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockK8sUtil)(nil).GetPod), ctx, params)
}

// GetPodContainers mocks base method.
func (m *MockK8sUtil) GetPodContainers(ctx context.Context, params *cd.GetPodParams) ([]cd.ContainerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodContainers", ctx, params)
	ret0, _ := ret[0].([]cd.ContainerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodContainers indicates an expected call of GetPodContainers.
func (mr *MockK8sUtilMockRecorder) GetPodContainers(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodContainers", reflect.TypeOf((*MockK8sUtil)(nil).GetPodContainers), ctx, params)
}
