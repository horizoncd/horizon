// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	collector "github.com/horizoncd/horizon/pkg/cluster/tekton/collector"
	models "github.com/horizoncd/horizon/pkg/pipelinerun/models"
	global "github.com/horizoncd/horizon/pkg/server/global"
	v1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockInterface) Collect(ctx context.Context, pr *v1beta1.PipelineRun, horizonMetaData *global.HorizonMetaData) (*collector.CollectResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx, pr, horizonMetaData)
	ret0, _ := ret[0].(*collector.CollectResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockInterfaceMockRecorder) Collect(ctx, pr, horizonMetaData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInterface)(nil).Collect), ctx, pr, horizonMetaData)
}

// GetPipelineRun mocks base method.
func (m *MockInterface) GetPipelineRun(ctx context.Context, pr *models.Pipelinerun) (*v1beta1.PipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRun", ctx, pr)
	ret0, _ := ret[0].(*v1beta1.PipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRun indicates an expected call of GetPipelineRun.
func (mr *MockInterfaceMockRecorder) GetPipelineRun(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRun", reflect.TypeOf((*MockInterface)(nil).GetPipelineRun), ctx, pr)
}

// GetPipelineRunLog mocks base method.
func (m *MockInterface) GetPipelineRunLog(ctx context.Context, pr *models.Pipelinerun) (*collector.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRunLog", ctx, pr)
	ret0, _ := ret[0].(*collector.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRunLog indicates an expected call of GetPipelineRunLog.
func (mr *MockInterfaceMockRecorder) GetPipelineRunLog(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRunLog", reflect.TypeOf((*MockInterface)(nil).GetPipelineRunLog), ctx, pr)
}

// GetPipelineRunObject mocks base method.
func (m *MockInterface) GetPipelineRunObject(ctx context.Context, object string) (*collector.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRunObject", ctx, object)
	ret0, _ := ret[0].(*collector.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRunObject indicates an expected call of GetPipelineRunObject.
func (mr *MockInterfaceMockRecorder) GetPipelineRunObject(ctx, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRunObject", reflect.TypeOf((*MockInterface)(nil).GetPipelineRunObject), ctx, object)
}
