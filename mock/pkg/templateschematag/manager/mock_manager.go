// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/templateschematag/manager/manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	models "github.com/horizoncd/horizon/pkg/templateschematag/models"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ListByClusterID mocks base method.
func (m *MockManager) ListByClusterID(ctx context.Context, clusterID uint) ([]*models.ClusterTemplateSchemaTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClusterID", ctx, clusterID)
	ret0, _ := ret[0].([]*models.ClusterTemplateSchemaTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByClusterID indicates an expected call of ListByClusterID.
func (mr *MockManagerMockRecorder) ListByClusterID(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClusterID", reflect.TypeOf((*MockManager)(nil).ListByClusterID), ctx, clusterID)
}

// UpsertByClusterID mocks base method.
func (m *MockManager) UpsertByClusterID(ctx context.Context, clusterID uint, tags []*models.ClusterTemplateSchemaTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByClusterID", ctx, clusterID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByClusterID indicates an expected call of UpsertByClusterID.
func (mr *MockManagerMockRecorder) UpsertByClusterID(ctx, clusterID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByClusterID", reflect.TypeOf((*MockManager)(nil).UpsertByClusterID), ctx, clusterID, tags)
}
