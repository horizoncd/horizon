// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/horizoncd/horizon/pkg/tag/models"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateMetatags mocks base method.
func (m *MockManager) CreateMetatags(ctx context.Context, metatags []*models.Metatag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetatags", ctx, metatags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetatags indicates an expected call of CreateMetatags.
func (mr *MockManagerMockRecorder) CreateMetatags(ctx, metatags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetatags", reflect.TypeOf((*MockManager)(nil).CreateMetatags), ctx, metatags)
}

// GetMetatagKeys mocks base method.
func (m *MockManager) GetMetatagKeys(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetatagKeys", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetatagKeys indicates an expected call of GetMetatagKeys.
func (mr *MockManagerMockRecorder) GetMetatagKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetatagKeys", reflect.TypeOf((*MockManager)(nil).GetMetatagKeys), ctx)
}

// GetMetatagsByKey mocks base method.
func (m *MockManager) GetMetatagsByKey(ctx context.Context, key string) ([]*models.Metatag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetatagsByKey", ctx, key)
	ret0, _ := ret[0].([]*models.Metatag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetatagsByKey indicates an expected call of GetMetatagsByKey.
func (mr *MockManagerMockRecorder) GetMetatagsByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetatagsByKey", reflect.TypeOf((*MockManager)(nil).GetMetatagsByKey), ctx, key)
}

// ListByResourceTypeID mocks base method.
func (m *MockManager) ListByResourceTypeID(ctx context.Context, resourceType string, resourceID uint) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceTypeID", ctx, resourceType, resourceID)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceTypeID indicates an expected call of ListByResourceTypeID.
func (mr *MockManagerMockRecorder) ListByResourceTypeID(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceTypeID", reflect.TypeOf((*MockManager)(nil).ListByResourceTypeID), ctx, resourceType, resourceID)
}

// ListByResourceTypeIDs mocks base method.
func (m *MockManager) ListByResourceTypeIDs(ctx context.Context, resourceType string, resourceIDs []uint, deduplicate bool) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceTypeIDs", ctx, resourceType, resourceIDs, deduplicate)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceTypeIDs indicates an expected call of ListByResourceTypeIDs.
func (mr *MockManagerMockRecorder) ListByResourceTypeIDs(ctx, resourceType, resourceIDs, deduplicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceTypeIDs", reflect.TypeOf((*MockManager)(nil).ListByResourceTypeIDs), ctx, resourceType, resourceIDs, deduplicate)
}

// UpsertByResourceTypeID mocks base method.
func (m *MockManager) UpsertByResourceTypeID(ctx context.Context, resourceType string, resourceID uint, tags []*models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByResourceTypeID", ctx, resourceType, resourceID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByResourceTypeID indicates an expected call of UpsertByResourceTypeID.
func (mr *MockManagerMockRecorder) UpsertByResourceTypeID(ctx, resourceType, resourceID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByResourceTypeID", reflect.TypeOf((*MockManager)(nil).UpsertByResourceTypeID), ctx, resourceType, resourceID, tags)
}
