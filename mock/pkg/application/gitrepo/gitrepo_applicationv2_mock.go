// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/application/gitrepo/gitrepo_applicationv2.go

// Package mock_gitrepo is a generated GoMock package.
package mock_gitrepo

import (
	context "context"
	reflect "reflect"

	gitrepo "github.com/horizoncd/horizon/pkg/application/gitrepo"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationGitRepo2 is a mock of ApplicationGitRepo interface.
type MockApplicationGitRepo2 struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGitRepo2MockRecorder
}

// MockApplicationGitRepo2MockRecorder is the mock recorder for MockApplicationGitRepo2.
type MockApplicationGitRepo2MockRecorder struct {
	mock *MockApplicationGitRepo2
}

// NewMockApplicationGitRepo2 creates a new mock instance.
func NewMockApplicationGitRepo2(ctrl *gomock.Controller) *MockApplicationGitRepo2 {
	mock := &MockApplicationGitRepo2{ctrl: ctrl}
	mock.recorder = &MockApplicationGitRepo2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationGitRepo2) EXPECT() *MockApplicationGitRepo2MockRecorder {
	return m.recorder
}

// CreateOrUpdateApplication mocks base method.
func (m *MockApplicationGitRepo2) CreateOrUpdateApplication(ctx context.Context, application string, request gitrepo.CreateOrUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateApplication", ctx, application, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateApplication indicates an expected call of CreateOrUpdateApplication.
func (mr *MockApplicationGitRepo2MockRecorder) CreateOrUpdateApplication(ctx, application, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateApplication", reflect.TypeOf((*MockApplicationGitRepo2)(nil).CreateOrUpdateApplication), ctx, application, request)
}

// GetApplication mocks base method.
func (m *MockApplicationGitRepo2) GetApplication(ctx context.Context, application, environment string) (*gitrepo.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, application, environment)
	ret0, _ := ret[0].(*gitrepo.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockApplicationGitRepo2MockRecorder) GetApplication(ctx, application, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockApplicationGitRepo2)(nil).GetApplication), ctx, application, environment)
}

// HardDeleteApplication mocks base method.
func (m *MockApplicationGitRepo2) HardDeleteApplication(ctx context.Context, application string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteApplication", ctx, application)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteApplication indicates an expected call of HardDeleteApplication.
func (mr *MockApplicationGitRepo2MockRecorder) HardDeleteApplication(ctx, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteApplication", reflect.TypeOf((*MockApplicationGitRepo2)(nil).HardDeleteApplication), ctx, application)
}
